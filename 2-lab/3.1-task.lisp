
(defun setVal(i val lst)(cond ((= i 0) (cons val (cdr lst)))
							  (t (cons (car lst) (setVal (- i 1) val (cdr lst))))
							  ))

(defun swap(lst i j)(setVal j (nth i lst) (setVal i (nth j lst) lst)))

(defun siftDown(lst i n)(cond ((>= (* i 2) n) lst)
							  ((= (+ 1 (* 2 i)) n) (cond ((not (string> (nth i lst) (nth (+ 1 (* 2 i)) lst)))
														  (swap lst i (+ 1 (* 2 i))))
														 (t lst)))
							  ((and (= (+ 1 (* 2 i)) n)
								    (not (string> (nth i lst) (nth (+ 1 (* 2 i)) lst)))
									) (swap lst i (+ 1 (* 2 i))))
							  ((and (not (string>= (nth i lst) (nth (+ 1 (* 2 i)) lst)))
									(not (string<= (nth (+ 1 (* 2 i)) lst) (nth (+ 2 (* 2 i)) lst)))
									) (siftDown (swap lst i (+ 1 (* 2 i))) (+ 1 (* 2 i)) n))
							  ((and (not (string>= (nth i lst) (nth (+ 2 (* 2 i)) lst)))
									(not (string<= (nth (+ 2 (* 2 i)) lst) (nth (+ 1 (* 2 i)) lst)))
									) (siftDown (swap lst i (+ 2 (* 2 i))) (+ 2 (* 2 i)) n))
							  (t lst)
							  ))

(defun heapify(lst i n)(cond ((< i 0) lst)
						     (t (heapify (siftDown lst i n) (- i 1) n))
						     ))

(defun sortHeap(lst i)(cond ((= i 0) lst)
							(t (sortHeap (siftDown (swap lst 0 i) 0 (- i 1)) (- i 1)))
	         				))

(defun heapSort(lst)(sortHeap (heapify lst (- (floor (length lst) 2) 1) (- (length lst) 1))
							  (- (length lst) 1)
							  ))
(write (heapSort '("Excepteur" "sint" "occaecat" "cupidatat" "non" "proident" "sunt" "in" "culpa" "qui" "officia" "deserunt" "mollit" "anim" "id" "est" "laborum")))
